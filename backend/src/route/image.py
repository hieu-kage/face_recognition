from fastapi import APIRouterfrom pydantic import BaseModelimport numpy as npimport cv2from src.services.utils import Attendanceimport base64router = APIRouter(prefix="/image", tags=["Image"])attendance = Attendance()class ImageRequest(BaseModel):    image_base64: str  # Ảnh gửi từ frontend dưới dạng base64@router.post("/predict")def predict(request: ImageRequest):    try:        # Giải mã ảnh từ base64 của request        image_data = base64.b64decode(request.image_base64.split(',')[-1])        np_arr = np.frombuffer(image_data, np.uint8)        frame = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)        # Check có frame gửi k        if frame is None:            return {"status": "fail", "message": "Không đọc được ảnh"}        # Nhận diện khuôn mặt -> trả về (User, input_image, matching_image)        result = attendance.recognize_face_from_image(frame)        if not result:            return {"status": "fail", "message": "Không nhận diện được khuôn mặt hoặc không trùng khớp"}        matched_user, input_img, matching_img = result        # Chuyển input_img thành base64        input_img_base64 = None        if input_img is not None:            _, buffer = cv2.imencode(".jpg", input_img)            input_img_base64 = base64.b64encode(buffer).decode("utf-8")        # Chuyển matching_img (ảnh gốc từ Firebase) thành base64        matching_img_base64 = None        if matching_img is not None:            _, buffer = cv2.imencode(".jpg", matching_img)            matching_img_base64 = base64.b64encode(buffer).decode("utf-8")        return {            "status": "success",            "user": matched_user.dict(),            "input_image_base64": input_img_base64,            "matching_image_base64": matching_img_base64        }    except Exception as e:        return {"status": "hello", "message": str(e)}